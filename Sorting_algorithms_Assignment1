Implement : 

1. insertion sort

2. selection sort

3. bubble sort

--------------------------------------------------------- AXM9415 ---------------------------------------------------------------------------------->  
public class SortingAlgorithms {
    
    // Insertion Sort
    public static int[] insertionSort(int[] arr) {
        int n = arr.length;
        for (int i = 1; i < n; i++) {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && key < arr[j]) {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
        return arr;
    }

    // Selection Sort
    public static int[] selectionSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            int minIdx = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIdx]) {
                    minIdx = j;
                }
            }
            int temp = arr[minIdx];
            arr[minIdx] = arr[i];
            arr[i] = temp;
        }
        return arr;
    }

    // Bubble Sort
    public static int[] bubbleSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        return arr;
    }

    // Utility method to print an array
    public static void printArray(int[] arr) {
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }

    // Main method for testing
    public static void main(String[] args) {
        int[] arr = {5, 1, 4, 2, 8};

        // Testing insertion sort
        int[] sortedArrInsertion = insertionSort(arr.clone());
        System.out.print("Insertion Sort: ");
        printArray(sortedArrInsertion);

        // Testing selection sort
        int[] sortedArrSelection = selectionSort(arr.clone());
        System.out.print("Selection Sort: ");
        printArray(sortedArrSelection);

        // Testing bubble sort
        int[] sortedArrBubble = bubbleSort(arr.clone());
        System.out.print("Bubble Sort: ");
        printArray(sortedArrBubble);
    }
}

Correctness Argument for Selection Sort:
Selection sort works by repeatedly finding the minimum element from the unsorted part of the array and swapping it with the first unsorted element. This process continues until the entire array is sorted. The correctness of selection sort can be argued based on the following points:

Invariant: At the beginning of each iteration, the prefix of the array (from the beginning up to the current position) is sorted.
Termination: The algorithm terminates when the entire array is sorted, as it consistently selects the smallest unsorted element and moves it to the correct position.
Swap Operations: Selection sort only swaps elements once the minimum element is found, ensuring that each element is in its final sorted position.

